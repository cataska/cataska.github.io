<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://blog.lovecankill.com' rel='self' type='application/rss+xml'/>
<title>
(love can kill)
</title>
<link>
http://blog.lovecankill.com
</link>
<description>
Something bittersweat
</description>
<lastBuildDate>
Mon, 25 Sep 2017 11:10:21 +0800
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://blog.lovecankill.com/posts/2017-09-25-clojure-test/
</guid>
<link>
http://blog.lovecankill.com/posts/2017-09-25-clojure-test/
</link>
<title>
Clojure 測試入門
</title>
<description>
&lt;p&gt;你是否有這樣的經驗：本來只是修改了 A 部分的程式，結果改完之後 B 部分的程式竟然動作不正常；或者是以前早就改好的問題，在這次改版之後又出現了呢？當有這些情形的出現，你需要的是透過測試來提早檢查可能出錯的地方，並找出會導致出錯的條件。&lt;/p&gt;&lt;p&gt;除了人工測試之外，最應該加入的就是有一組編寫好用來測試程式的程式。有了這些測試程式，你可以在正式上線或提交程式碼之前，利用這些測試程式檢查新修改的程式是否符合規定，也可以保證過往的問題不再出現。&lt;/p&gt;&lt;p&gt;本文就跟大家介紹在 Clojure 專案中撰寫測試的方法。使用的工具是內建於 clojure 當中的 clojure.test。&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;預備&quot;&gt;&lt;/a&gt;預備&lt;/h2&gt;&lt;p&gt;要使用 clojure.test 之前，要記得將 clojure.test 的命名空間在測試程式中引入，如下所示：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;ns clj-test.core-test
  &amp;#40;:require &amp;#91;clojure.test :refer :all&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果使用 leiningen 建立專案，專案中就會有一個 test 目錄，其中有產生出來的空白測試程式碼範本，把測試程式寫在那裏就對了。&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;斷言&quot;&gt;&lt;/a&gt;斷言&lt;/h2&gt;&lt;h3&gt;&lt;a name=&quot;is&quot;&gt;&lt;/a&gt;is&lt;/h3&gt;&lt;p&gt;Clojure.test 也像其他的測試框架一樣，提供了斷言 (Assertion) 用來判斷一段程式的結果是否符合預期。它提供了 &lt;code&gt;is&lt;/code&gt; 這個巨集用來判斷結果是否爲真，以下是它的使用範例：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;is &amp;#40;= 4 &amp;#40;+ 2 2&amp;#41;&amp;#41;
&amp;#40;is &amp;#40;.startsWith &amp;quot;abcde&amp;quot; &amp;quot;ab&amp;quot;&amp;#41;
&amp;#40;is &amp;#40;instance? Integer 256&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;are&quot;&gt;&lt;/a&gt;are&lt;/h3&gt;&lt;p&gt;除了 &lt;code&gt;is&lt;/code&gt; 之外，clojure.test 還提供了 &lt;code&gt;are&lt;/code&gt; 這個巨集，幫助你將許多相似的判斷整理起來，使用方法如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;are &amp;#91;x y&amp;#93; &amp;#40;= x y&amp;#41;
  4 &amp;#40;+ 2 2&amp;#41;
  2 &amp;#40;+ 1 1&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的範例跟以下的範例是一樣的，但是透過 &lt;code&gt;are&lt;/code&gt; 就可以將類似的衆多 &lt;code&gt;is&lt;/code&gt; 程式整理起來：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;is &amp;#40;= 4 &amp;#40;+ 2 2&amp;#41;&amp;#41;
&amp;#40;is &amp;#40;= 2 &amp;#40;+ 1 1&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;thrown?&quot;&gt;&lt;/a&gt;thrown?&lt;/h3&gt;&lt;p&gt;因爲 clojure 是一個依靠 JVM 的語言，除了測試要執行的程式是不是符合預期，也會有需要測試是否會丟出預期例外的時候。Clojure.test 提供了 thrown? 巨集來完成這項工作：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;is &amp;#40;thrown? ArithmeticException &amp;#40;/ 1 0&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;測試案例&quot;&gt;&lt;/a&gt;測試案例&lt;/h2&gt;&lt;h3&gt;&lt;a name=&quot;撰寫&quot;&gt;&lt;/a&gt;撰寫&lt;/h3&gt;&lt;p&gt;Clojure.test 提供 &lt;code&gt;deftest&lt;/code&gt; 給使用者定義自己的測試案例，透過 &lt;code&gt;deftest&lt;/code&gt; 中一個個寫好的判斷程式，來檢查欲執行的程式是否符合預期。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;deftest addition
  &amp;#40;is &amp;#40;= 4 &amp;#40;+ 2 2&amp;#41;&amp;#41;&amp;#41;
  &amp;#40;is &amp;#40;= 7 &amp;#40;+ 3 4&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不同的測試案例也可以再由另一個 &lt;code&gt;deftest&lt;/code&gt; 包覆起來成爲一個更高階的測試案例。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;deftest arithmetic
  &amp;#40;addition&amp;#41;
  &amp;#40;subtraction&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;說明文字&quot;&gt;&lt;/a&gt;說明文字&lt;/h3&gt;&lt;p&gt;要清楚講明測試案例的功用，除了把命名儘量寫的容易理解之外，另一個方式就是在測試案例的說明註解中寫清楚。在 clojure.test 中，想利用文字來清楚說明測試的意圖，可以在 &lt;code&gt;is&lt;/code&gt; 中再加上說明文字。當測試出錯時，該處的文字會出現在錯誤報告中：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;is &amp;#40;= 5 &amp;#40;+ 2 2&amp;#41;&amp;#41; &amp;quot;Crazy arithmetic&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外也提供了 &lt;code&gt;testing&lt;/code&gt; 巨集，讓撰寫測試者可以將幾個斷言聚集在一起加上說明文字，不致於散亂而更有組織。同樣地，說明文字也會出現在錯誤報告中：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;testing &amp;quot;Arithmetic&amp;quot;
  &amp;#40;testing &amp;quot;with positive integers&amp;quot;
    &amp;#40;is &amp;#40;= 4 &amp;#40;+ 2 2&amp;#41;&amp;#41;&amp;#41;
    &amp;#40;is &amp;#40;= 7 &amp;#40;+ 3 4&amp;#41;&amp;#41;&amp;#41;&amp;#41;
  &amp;#40;testing &amp;quot;with negative integers&amp;quot;
    &amp;#40;is &amp;#40;= -4 &amp;#40;+ -2 -2&amp;#41;&amp;#41;&amp;#41;
    &amp;#40;is &amp;#40;= -1 &amp;#40;+ 3 -4&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要注意的是，&lt;code&gt;testing&lt;/code&gt; 巨集只能在 &lt;code&gt;deftest&lt;/code&gt; 中使用。&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;執行&quot;&gt;&lt;/a&gt;執行&lt;/h3&gt;&lt;p&gt;寫好測試案例之後，可以透過 clojure.test 提供的 &lt;code&gt;run-tests&lt;/code&gt; 來執行寫好的測試範例：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;run-tests 'your.namespace 'some.other.namespace&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果在 &lt;code&gt;run-tests&lt;/code&gt; 中沒有寫下命名空間，將會執行目前命名空間中的測試案例。&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;fixture&quot;&gt;&lt;/a&gt;Fixture&lt;/h3&gt;&lt;p&gt;有時候一些相關的測試案例執行之前，需要先啓動某些資源，比如資料庫的測試案例，就必須在所有測試開始之前，先與資料庫做好連線。在測試完畢之後，妥善地恢復成之前的樣貌。這種在測試案例之中的準備，就稱爲 Fixture。&lt;/p&gt;&lt;p&gt;在 clojure.test 中，Fixture 只是一個簡單的函式，它只接受一個參數。這個參數就是待執行的測試案例，如果想要在執行測試案例前後做一些準備或善後作業，只要在測試案例前後執行即可，範例如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn my-fixture &amp;#91;test-fn&amp;#93;
  ;; 在這裡設定或啓動必須事先準備好的事物
  &amp;#40;test-fn&amp;#41; ;; 呼叫測試案例
  ;; 在這裡做善後工作
 &amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Fixture 分爲兩種，一種是只需要執行一次，另一種是針對每個測試案例都會執行一次。以下是使用範例：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;use-fixtures :once load-data-fixture&amp;#41;   ;; 只執行一次
&amp;#40;use-fixtures :each add-test-id-fixture&amp;#41; ;; 每個測試案例都會執行一次
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;小結&quot;&gt;&lt;/a&gt;小結&lt;/h2&gt;&lt;p&gt;Clojure.test 提供了一些簡單實用的功能，讓撰寫測試者可以不費力地開始撰寫測試案例，雖然陽春但是已經夠用了。如果你需要其他更進階的測試功能，不妨可以看看以下提供的其他測試框架或函式庫。如果你有更好的建議，歡迎留言分享討論。&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;資源&quot;&gt;&lt;/a&gt;資源&lt;/h2&gt;&lt;h3&gt;&lt;a name=&quot;參考資料&quot;&gt;&lt;/a&gt;參考資料&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://clojure.github.io/clojure/clojure.test-api.html'&gt;clojure.test 官方文件&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://blog.jayfields.com/2010/08/clojuretest-introduction.html'&gt;clojure.test Introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://www.diva-portal.org/smash/get/diva2:806620/FULLTEXT01.pdf'&gt;Test-Driven Development in Clojure&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://dotblogs.com.tw/hatelove/2013/01/11/learning-tdd-in-30-days-catalog-and-reference'&gt;30 天快速上手 TDD&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;其他測試框架/函式庫&quot;&gt;&lt;/a&gt;其他測試框架/函式庫&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/marick/Midje'&gt;Midje&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://clojure-expectations.github.io/'&gt;Expectations&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://speclj.com/'&gt;Speclj&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/johncowie/smidjen'&gt;smidjen&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 25 Sep 2017 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://blog.lovecankill.com/posts/2016-12-06-hello-linebot/
</guid>
<link>
http://blog.lovecankill.com/posts/2016-12-06-hello-linebot/
</link>
<title>
使用 Clojure 打造簡易的 LINE Bot - 起手式
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今年是對話式介面 (Conversational UI) 的一年，各家即時通訊廠商紛紛推出自家的機器人平臺 (Bot Platform)，如 Facebook、LINE、Microsoft 與 Telegram 等等。&lt;/p&gt;&lt;p&gt;使用者可以透過機器人 (Bot)，以對話方式來取得需要的資訊，或是完成想做的事，而目前在臺灣最流行的通訊軟體就是 LINE。之後將會以一系列的文章來打造簡易的 LINE 機器人，使用的程式語言是 Clojure。&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;前置作業&quot;&gt;&lt;/a&gt;前置作業&lt;/h2&gt;&lt;p&gt;由於 Clojure 是一門建立在 JVM 之上的程式語言，因此 JDK/JRE 是不可免的，在 &lt;a href='http://www.oracle.com/technetwork/java/javase/downloads/index.html'&gt;Java 下載頁面&lt;/a&gt;可以下載到最新的版本。&lt;/p&gt;&lt;p&gt;另外需要的工具是在 Clojure 生態系被廣泛使用的 &lt;a href='http://leiningen.org'&gt;Leiningen&lt;/a&gt;。它可以建立專案、執行測試、編譯程式碼、取得專案需要的相依函式庫與打包專案等等功能。最簡單的下載方法就是從&lt;a href='https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein'&gt;這裡&lt;/a&gt;下載檔案之後，執行它便完成初始化了。&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;建立專案&quot;&gt;&lt;/a&gt;建立專案&lt;/h2&gt;&lt;p&gt;在這一系列的文章裡，我們不會使用任何一個 Clojure 的網站框架 (web framework)，而是使用個別的函式庫來完成工作。首先使用 Compojure 提供的專案範本 (project template) 來建立專案：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ lein new compojure webapp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href='https://github.com/weavejester/compojure'&gt;Compojure&lt;/a&gt; 是一個架構在 Ring 之上的路由函式庫，它將處理各方發送過來的請求予以簡化，如網站各路徑的資源要求。而 &lt;a href='https://github.com/ring-clojure/ring'&gt;Ring&lt;/a&gt; 則是一個類似 Python 的 WSGI 或 Ruby 下 Rack 的函式庫，將 HTTP 的規則簡化成統一的 API，並能夠以元件的方式建構大型的網站應用程式。&lt;/p&gt;&lt;p&gt;接着在命令列裡輸入：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ cd webapp; lein run server-headless
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再開啓你常用的瀏覽器並在網址列裡輸入 &lt;code&gt;http://localhost:3000&lt;/code&gt; 後按下 Enter，你應該會看到寫着 &lt;code&gt;Hello World&lt;/code&gt; 網頁出現，這表示第一步已經成功了！值得注意的是第一次輸入 &lt;code&gt;lein run server-headless&lt;/code&gt; 的時候，可能因爲要下載其他需要用到的函式庫，所以還無法在網頁中看到內容，最好等到命令列中出現 &lt;code&gt;Started server on port 3000&lt;/code&gt; 後再開啓瀏覽器。&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;新增路由&quot;&gt;&lt;/a&gt;新增路由&lt;/h2&gt;&lt;p&gt;依據 LINE 官方開發文件 (&lt;a href='https://devdocs.line.me/en/'&gt;英文版&lt;/a&gt;/&lt;a href='https://devdocs.line.me/ja/'&gt;日文版&lt;/a&gt;)，使用 Messaging API 的開發者必須提供 Webhook 給 LINE，當使用者將機器人加入好友或傳訊息給機器人時，LINE 會透過 Webhook 提供的網址傳遞訊息給機器人，機器人再根據收到的訊息作出回應。&lt;/p&gt;&lt;p&gt;要添加 Webhook 讓 LINE 傳訊息過來，除了必須在 LINE 開發者網站上填寫之外 (之後的文章會提到)，還必須修改 &lt;code&gt;src/webapp/handler.clj&lt;/code&gt;，在還未修改之前 &lt;code&gt;handler.clj&lt;/code&gt; 內容如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;ns webapp.handler
  &amp;#40;:require &amp;#91;compojure.core :refer :all&amp;#93;
            &amp;#91;compojure.route :as route&amp;#93;
            &amp;#91;ring.middleware.defaults :refer &amp;#91;wrap-defaults site-defaults&amp;#93;&amp;#93;&amp;#41;&amp;#41;

&amp;#40;defroutes app-routes
  &amp;#40;GET &amp;quot;/&amp;quot; &amp;#91;&amp;#93; &amp;quot;Hello World&amp;quot;&amp;#41;
  &amp;#40;route/not-found &amp;quot;Not Found&amp;quot;&amp;#41;&amp;#41;

&amp;#40;def app
  &amp;#40;wrap-defaults app-routes site-defaults&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下加入一個名爲 &lt;code&gt;callback&lt;/code&gt; 的網址路徑，接受 LINE 傳送過來的訊息：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;ns webapp.handler
  &amp;#40;:require &amp;#91;compojure.core :refer :all&amp;#93;
            &amp;#91;compojure.route :as route&amp;#93;
            &amp;#91;ring.middleware.defaults :refer &amp;#91;wrap-defaults site-defaults&amp;#93;&amp;#93;&amp;#41;&amp;#41;

&amp;#40;defroutes app-routes
  &amp;#40;GET &amp;quot;/&amp;quot; &amp;#91;&amp;#93; &amp;quot;Hello World&amp;quot;&amp;#41;
  &amp;#40;GET &amp;quot;/callback&amp;quot; &amp;#91;&amp;#93; &amp;quot;Hello LINE Messaging API&amp;quot;&amp;#41;
  &amp;#40;route/not-found &amp;quot;Not Found&amp;quot;&amp;#41;&amp;#41;

&amp;#40;def app
  &amp;#40;wrap-defaults app-routes site-defaults&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根據以上的程式可以看到新增了一個名爲 &lt;code&gt;callback&lt;/code&gt; 的路由，當有人造訪這個路由，將會顯示 &lt;strong&gt;Hello LINE Messaging API&lt;/strong&gt;。我們可以打開瀏覽器看看內容是否正確，在瀏覽器輸入 &lt;code&gt;http://localhost:3000/callback&lt;/code&gt; 後便會看到訊息出現在網頁上。&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;回顧&quot;&gt;&lt;/a&gt;回顧&lt;/h2&gt;&lt;p&gt;在第一篇系列文章裡我們使用了 Ring 與 Compojure 建立了網站的雛形，並新增了接受 LINE 訊息的網址路徑。詳細的程式碼，請參閱&lt;a href='https://github.com/clojure-tw/line-bot-sdk-clojure/tree/0402187bd5c2c891a2bd48cdc45ee726f24a42fc'&gt;這裡&lt;/a&gt;。&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 06 Dec 2016 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://blog.lovecankill.com/posts/2016-11-08-oneday-typescript/
</guid>
<link>
http://blog.lovecankill.com/posts/2016-11-08-oneday-typescript/
</link>
<title>
TypeScript 一日課
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;緣起&quot;&gt;&lt;/a&gt;緣起&lt;/h2&gt;&lt;p&gt;上週六 (11/5) 參加了由 &lt;a href='https://skilltree.my/'&gt;Skilltree&lt;/a&gt; 舉辦的 &lt;a href='https://skilltree.my/events/6kafn'&gt;TypeScript 新手入門班&lt;/a&gt; 付費課程，希望藉由這個課程快速地了解 TypeScript 的大致面貌。&lt;/p&gt;&lt;p&gt;上完課程後，覺得是一門可以投資的語言，它並不像它的前輩 CoffeeScript 或 LiveScript，讓寫程式的人因爲歧義性而不易掌握，不僅有簡單易懂的語法可以與 JavaScript 相對應，更增加了型別的宣告與檢查，不會因爲型別的問題而在運行程式時，出現非預期的錯誤；還有友善的物件導向支援語法。&lt;/p&gt;&lt;p&gt;以下介紹 TypeScript 的特性與語法，也算是自己的課後回顧。&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;&lt;a name=&quot;typescript&amp;#95;的特性與語法&quot;&gt;&lt;/a&gt;TypeScript 的特性與語法&lt;/h2&gt;&lt;h3&gt;&lt;a name=&quot;轉譯&quot;&gt;&lt;/a&gt;轉譯&lt;/h3&gt;&lt;p&gt;TypeScript 寫成的程式經由工具會轉譯成 JavaScript，與一般的 JavaScript 並無二致。因此可以在各個瀏覽器與平臺間使用&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;強型別&quot;&gt;&lt;/a&gt;強型別&lt;/h3&gt;&lt;p&gt;JavaScript 中雖然有幾種型別，但是由於變數的型別是可以動態變換的，因此若是在撰寫時不注意，就可能會發生不同型別之間誤用的可能。而 TypeScript 支援強型別，會阻止不同型別之間誤用而發生悲劇。&lt;/p&gt;&lt;p&gt;如以下的函數就宣告了兩個參數爲數字，返回值亦爲數字。使用此函數若是丟進非數字型態的參數，IDE 或是轉譯 TypeScript 成 JavaScript 的工具便會報錯。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;function plus&amp;#40;a: number, b: number&amp;#41;: number {
  return a + b;
}

var r1 = plus&amp;#40;1, 2&amp;#41;;
var r2 = plus&amp;#40;1, '2'&amp;#41;; // 錯誤
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;除了支援 JavaScript 的型別之外 (Boolean, String, Number, Array, Enum, Any)，TypeScript 也可以制定自己的類型。&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;常數與限定範圍變數&quot;&gt;&lt;/a&gt;常數與限定範圍變數&lt;/h3&gt;&lt;p&gt;常數是使用 &lt;code&gt;const&lt;/code&gt; 關鍵字來定義不會更改的變數，限定範圍變數則是使用 &lt;code&gt;let&lt;/code&gt; 關鍵字來定義，使用限定範圍變數會防止程式在變數的作用域外，還能夠存取的問題。&lt;code&gt;let&lt;/code&gt; 關鍵字能夠將變數限定在某個範圍內。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;const RETRY = 3;

var count = 1;
for &amp;#40;var i = 0; i &amp;lt; 10; i++&amp;#41; {
  let count = i;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;函數&quot;&gt;&lt;/a&gt;函數&lt;/h3&gt;&lt;p&gt;如前面範例所提供，TypeScript 的函數參數與返回值可以寫上型態，若使用時型態不符，則會出現錯誤訊息告知。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;function GetDiscountPrice&amp;#40;price: number&amp;#41;: number {
  if &amp;#40;price &amp;gt; 200&amp;#41; {
    return price &amp;#42; 0.8;
  }
  return price;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a name=&quot;箭頭函數&quot;&gt;&lt;/a&gt;箭頭函數&lt;/h4&gt;&lt;p&gt;JavaScript 中的 this 總是讓人一不小心就着了道，如果神智不夠清楚。使用箭頭函數則會自動將函數中的 this 變數綁定到此函數所在的物件，不會因爲 this 變數在不同狀況下的不同值而中箭了。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;function Person&amp;#40;&amp;#41;{
  this.age = 0;

  setInterval&amp;#40;&amp;#40;&amp;#41; =&amp;gt; {
    this.age++; // this 代表的是 Person 物件
  }, 1000&amp;#41;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;友好的物件導向語法&quot;&gt;&lt;/a&gt;友好的物件導向語法&lt;/h3&gt;&lt;p&gt;TypeScript 支援與 Java, C# 等主流物件導向語言相似的語法，物件的屬性還可以定義是否准許公開存取。以下範例展示如何定義建構式與物件屬性：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;class Student {
  private gender: string;
  age: number; // 預設是 public

  constructor&amp;#40;gender: string, age: number&amp;#41; {
    this.gender = gender;
    this.age = age;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a name=&quot;繼承&quot;&gt;&lt;/a&gt;繼承&lt;/h4&gt;&lt;p&gt;物件導向其中一個優點就是能夠利用繼承，將父類別已經提供的功能直接搬過來再利用，或是覆蓋原有的功能，提供另一種功能。TypeScript 利用 &lt;code&gt;extends&lt;/code&gt; 關鍵字來支援繼承。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;class Shape {
  draw&amp;#40;&amp;#41; {
    console.log&amp;#40;&amp;quot;Draw shape&amp;quot;&amp;#41;;
  }
}

class Circle extends Shape {
  draw&amp;#40;&amp;#41; {
    console.log&amp;#40;&amp;quot;Draw circle&amp;quot;&amp;#41;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a name=&quot;介面&quot;&gt;&lt;/a&gt;介面&lt;/h4&gt;&lt;p&gt;介面提供了比繼承更彈性的作法，它只定義了一組協議或合約而不提供實作，只要實作了這個介面就符合了合約，使用此介面的人並不需要知道實作此介面的物件究竟爲何。TypeScript 提供了 &lt;code&gt;interface&lt;/code&gt; 關鍵字。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;interface Calculator {
  add&amp;#40;a: number, b: number&amp;#41;: number;
  subtract&amp;#40;a: number, b: number&amp;#41;: number;
}

class SimpleCalculator implements Calculator {
    add&amp;#40;a: number, b: number&amp;#41;: number { return a + b; }
    subtract&amp;#40;a: number, b: number&amp;#41;: number { return a - b; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a name=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h4&gt;&lt;p&gt;泛型是一種在撰寫程式時，將型態視爲參數的設計方法，直到使用這些程式才決定要使用哪些型態。例如在 C++ 中會定義一些通用的資料結構或演算法，這些程式能夠適用大多數的型態。&lt;/p&gt;&lt;p&gt;在 TypeScript 中泛型函數的寫法：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;function identity&amp;lt;T&amp;gt;&amp;#40;arg: T&amp;#41;: T {
  return arg;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 TypeScript 中泛型類別的寫法：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;class GenericNumber&amp;lt;T&amp;gt; {
    zeroValue: T;
    add: &amp;#40;x: T, y: T&amp;#41; =&amp;gt; T;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根據前面的例子可以看到，定義泛型型態是利用角括號 (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) 將型態包起來。&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;模組&quot;&gt;&lt;/a&gt;模組&lt;/h3&gt;&lt;p&gt;TypeScript 提供了 &lt;code&gt;module&lt;/code&gt; 關鍵字可以將程式碼分門別類，相同名稱的兩個函數可以分類在不同的模組底下，就不會有衝突發生，將程式碼以功能分類也可以增加對程式的理解。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;module Product {
  export function Validate&amp;#40;data&amp;#41; {
    //// 一些程式
    return true;
  }
}

// 在其他程式中如此使用
Product.Validate&amp;#40;data&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;與其它&amp;#95;javascript&amp;#95;函式庫協作&quot;&gt;&lt;/a&gt;與其它 JavaScript 函式庫協作&lt;/h3&gt;&lt;p&gt;在 TypeScript 還沒有發明以前，就已經有非常多好用的 JavaScript 函式庫，例如 jQuery。這些 JavaScript 並沒有明確指出函數的型態，要怎麼在 TypeScript 使用呢？&lt;/p&gt;&lt;p&gt;TypeScript 提供引入定義檔的方式，其中寫了第三方函式庫的型態定義，TypeScript 便可以藉助這些定義與第三方函式庫協作。&lt;/p&gt;&lt;p&gt;引入定義檔的寫法如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;typescript&quot;&gt;/// &amp;lt;reference path=&amp;quot;./node&amp;#95;modules/@types/jquery/index.d.ts&amp;quot; /&amp;gt;
$&amp;#40;'#product'&amp;#41;.on&amp;#40;'click', function&amp;#40;&amp;#41; {
   //// 更多程式
}&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至於如何安裝需要的定義檔，請參考 &lt;a href='http://definitelytyped.org/'&gt;DefinitelyTyped&lt;/a&gt;。&lt;/p&gt;&lt;hr/&gt;&lt;h2&gt;&lt;a name=&quot;後記&quot;&gt;&lt;/a&gt;後記&lt;/h2&gt;&lt;p&gt;當天的課程除了介紹 TypeScript 之外，也講解了 TypeScript 與 C# 之間前後端的快速整合，由於這些快速整合與 Visual Studio 有關，而目前我的工作機器是 Mac 和使用 Visual Studio Code，因此無法使用這些祕技，在此就不再贅述。&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;結論&quot;&gt;&lt;/a&gt;結論&lt;/h2&gt;&lt;p&gt;如開頭所述，TypeScript 是個值得投資的語言，不僅可以與 JavaScript 整合，還提供了型別檢查，友善類別語法等等，藉由 IDE 或轉譯工具的幫助，在撰寫時就可以知道錯誤，不至於要等到程式運行時才出現非預期的錯誤。&lt;/p&gt;&lt;p&gt;除了前面介紹的語法與特性之外，TypeScript 還提供了其它好用的功能，有興趣的朋友可以到官網與閱讀其它文件來瞭解。&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;參考資料&quot;&gt;&lt;/a&gt;參考資料&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://www.typescriptlang.org/index.html'&gt;TypeScript 官網&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.gitbook.com/book/zhongsp/typescript-handbook'&gt;TypeScript Handbook 中文版&lt;/a&gt;&lt;/li&gt;&lt;li&gt;c9s 寫的 &lt;a href='https://medium.com/@c9s/%E5%B0%8F%E7%B7%A8%E5%B9%AB%E4%BD%A0%E8%B8%A9%E5%9C%B0%E9%9B%B7%E7%B3%BB%E5%88%97-typescript-%E9%81%A9%E5%90%88%E6%88%91%E5%97%8E-e15b5a0607d7#.eos7ixx50'&gt;TypeScript 導盲與踩雷文&lt;/a&gt;，幫助你瞭解 TypeScript 究竟適不適合你&lt;/li&gt;&lt;/ul&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 08 Nov 2016 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://blog.lovecankill.com/posts/2016-11-06-first-post/
</guid>
<link>
http://blog.lovecankill.com/posts/2016-11-06-first-post/
</link>
<title>
好久沒有寫部落格
</title>
<description>
&lt;p&gt;好多年前臺灣部落格開始蓬勃發展時，當時也跟風開始寫文章。但是只是一頭熱，沒多久就放棄了。&lt;/p&gt;&lt;p&gt;好幾年過去了，現在心裏又萌起寫文章的念頭，希望這次可以持續久一點。那就拭目以待吧。&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 06 Nov 2016 00:00:00 +0800
</pubDate>
</item>
</channel>
</rss>
